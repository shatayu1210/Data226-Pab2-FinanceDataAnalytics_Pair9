{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.7", "generated_at": "2024-11-13T06:35:00.902214Z", "invocation_id": "71492753-44c3-4a91-aa0b-5b537c8ac2f5", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.847827Z", "completed_at": "2024-11-13T06:35:00.857301Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.857661Z", "completed_at": "2024-11-13T06:35:00.857683Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010782957077026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.build_fda.bollinger_stock_summary", "compiled": true, "compiled_code": "WITH stock_prices AS (\n    SELECT\n        date,\n        close,\n        symbol\n    FROM dev.raw_data.stock_data\n    WHERE symbol IN ('AAPL', 'NVDA')  -- Including both Apple and Nvidia\n),\n\n-- Calculate the 20-day SMA and 20-day standard deviation for both symbols\nsma_stddev AS (\n    SELECT\n        date,\n        symbol,\n        close,\n        AVG(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS middle_band,\n        STDDEV(close) OVER (PARTITION BY symbol ORDER BY date ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS stddev_20\n    FROM stock_prices\n),\n\n-- Calculate the upper and lower bands\nbands AS (\n    SELECT\n        date,\n        symbol,\n        close,\n        middle_band,\n        (middle_band + (2 * stddev_20)) AS upper_band,\n        (middle_band - (2 * stddev_20)) AS lower_band\n    FROM sma_stddev\n)\n\nSELECT\n    date,\n    symbol,  -- To differentiate between Apple and Nvidia\n    close,\n    middle_band,\n    upper_band,\n    lower_band\nFROM bands\nORDER BY symbol, date", "relation_name": "dev.analytics.bollinger_stock_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.859684Z", "completed_at": "2024-11-13T06:35:00.862576Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.862850Z", "completed_at": "2024-11-13T06:35:00.862857Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004045963287353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.build_fda.fsi_stock_summary", "compiled": true, "compiled_code": "WITH interval_widths AS (\n    SELECT\n        ts as date,\n        forecast,\n        lower_bound,\n        upper_bound,\n        REPLACE(series, '\"', '') AS symbol,\n        (upper_bound - lower_bound) AS interval_width,\n        'FORECASTED' as record_type\n    FROM dev.adhoc.stock_data_forecast  -- Referencing the stock data forecast table\n),\n\nstatistics AS (\n    SELECT\n        symbol,\n        AVG(interval_width) AS avg_interval_width,\n        STDDEV(interval_width) AS stddev_interval_width\n    FROM interval_widths\n    GROUP BY symbol\n),\n\nrecent_data AS (\n    SELECT\n        date,\n        close,\n        symbol,\n        'HISTORICAL' as record_type\n    FROM dev.raw_data.stock_data\n    WHERE date >= CURRENT_DATE() - INTERVAL '21 DAY'  -- Fetch data from the last 21 days (3 weeks)\n      AND symbol IN ('AAPL', 'NVDA')                    -- Filter for specific symbols\n)\n\nSELECT\n    a.record_type,\n    a.symbol,\n    a.date,\n    a.forecast as close,\n    s.avg_interval_width,\n    s.stddev_interval_width,\n    -- FSI Calculation\n    1 - (s.stddev_interval_width / s.avg_interval_width) AS fsi\nFROM interval_widths a\nJOIN statistics s\n    ON a.symbol = s.symbol\n\nUNION ALL\n\nSELECT\n    r.record_type,\n    r.symbol,\n    r.date,\n    r.close,\n    NULL AS avg_interval_width,  -- NULL for non-forecasted data\n    NULL AS stddev_interval_width,  -- NULL for non-forecasted data\n    NULL AS fsi,  -- NULL for non-forecasted data\nFROM recent_data r\nORDER BY date, symbol", "relation_name": "dev.analytics.fsi_stock_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.865313Z", "completed_at": "2024-11-13T06:35:00.867747Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.867973Z", "completed_at": "2024-11-13T06:35:00.867978Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032050609588623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.build_fda.obv_stock_summary", "compiled": true, "compiled_code": "WITH ordered_data AS (\n    SELECT\n        date,\n        close,\n        volume,\n        symbol,\n        LEAD(close) OVER (PARTITION BY symbol ORDER BY date) AS next_close\n    FROM dev.raw_data.stock_data -- Referencing the raw data table in the dev database\n    WHERE symbol IN ('AAPL', 'NVDA')  -- Include both AAPL and NVDA symbols\n),\n\nobv_calculation AS (\n    SELECT\n        date,\n        close,\n        volume,\n        symbol,\n        CASE\n            WHEN close > LAG(close) OVER (PARTITION BY symbol ORDER BY date) THEN volume\n            WHEN close < LAG(close) OVER (PARTITION BY symbol ORDER BY date) THEN -volume\n            ELSE 0\n        END AS volume_change\n    FROM ordered_data\n),\n\ncumulative_obv AS (\n    SELECT\n        date,\n        symbol,\n        close,\n        SUM(volume_change) OVER (PARTITION BY symbol ORDER BY date) AS obv\n    FROM obv_calculation\n)\n\nSELECT\n    date,\n    symbol,\n    close,\n    obv\nFROM cumulative_obv\nORDER BY symbol, date", "relation_name": "dev.analytics.obv_stock_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.875258Z", "completed_at": "2024-11-13T06:35:00.877117Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.877323Z", "completed_at": "2024-11-13T06:35:00.877327Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0025222301483154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.build_fda.check_null_fsi", "compiled": true, "compiled_code": "SELECT *\nFROM dev.analytics.fsi_stock_summary\nWHERE symbol IN ('AAPL', 'NVDA')\n  AND record_type = 'FORECASTED'\n  AND fsi IS NULL", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.878414Z", "completed_at": "2024-11-13T06:35:00.885407Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.885610Z", "completed_at": "2024-11-13T06:35:00.885614Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007683753967285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.build_fda.not_null_bollinger_stock_summary_close.4959e39a23", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect close\nfrom dev.analytics.bollinger_stock_summary\nwhere close is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.886558Z", "completed_at": "2024-11-13T06:35:00.888908Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.889102Z", "completed_at": "2024-11-13T06:35:00.889106Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0029730796813964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.build_fda.not_null_bollinger_stock_summary_date.b95d5b9419", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom dev.analytics.bollinger_stock_summary\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.890035Z", "completed_at": "2024-11-13T06:35:00.892223Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.892399Z", "completed_at": "2024-11-13T06:35:00.892403Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0027761459350585938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.build_fda.not_null_bollinger_stock_summary_symbol.8adff61bcb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect symbol\nfrom dev.analytics.bollinger_stock_summary\nwhere symbol is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.893207Z", "completed_at": "2024-11-13T06:35:00.895233Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.895399Z", "completed_at": "2024-11-13T06:35:00.895402Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0025589466094970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.build_fda.not_null_obv_stock_summary_date.50d0b7b73c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom dev.analytics.obv_stock_summary\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.896184Z", "completed_at": "2024-11-13T06:35:00.898207Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.898380Z", "completed_at": "2024-11-13T06:35:00.898383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0025551319122314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.build_fda.not_null_obv_stock_summary_obv.0e7eb4ac61", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect obv\nfrom dev.analytics.obv_stock_summary\nwhere obv is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-13T06:35:00.899172Z", "completed_at": "2024-11-13T06:35:00.901194Z"}, {"name": "execute", "started_at": "2024-11-13T06:35:00.901361Z", "completed_at": "2024-11-13T06:35:00.901363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0025560855865478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.build_fda.not_null_obv_stock_summary_symbol.d37ec530e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect symbol\nfrom dev.analytics.obv_stock_summary\nwhere symbol is null\n\n\n", "relation_name": null}], "elapsed_time": 0.7342009544372559, "args": {"use_colors_file": true, "cache_selected_only": false, "print": true, "version_check": true, "partial_parse": true, "which": "generate", "log_level_file": "debug", "empty_catalog": false, "log_file_max_bytes": 10485760, "exclude": [], "log_level": "info", "send_anonymous_usage_stats": true, "introspect": true, "log_format_file": "debug", "log_path": "/Users/shatayu/Downloads/DATA226_Lab2Prep/build_fda/logs", "populate_cache": true, "macro_debugging": false, "invocation_command": "dbt docs generate", "indirect_selection": "eager", "strict_mode": false, "enable_legacy_logger": false, "show_resource_report": false, "log_format": "default", "warn_error_options": {"include": [], "exclude": []}, "printer_width": 80, "favor_state": false, "require_explicit_package_overrides_for_builtin_materializations": true, "vars": {}, "quiet": false, "write_json": true, "static_parser": true, "select": [], "use_colors": true, "static": false, "source_freshness_run_project_hooks": false, "project_dir": "/Users/shatayu/Downloads/DATA226_Lab2Prep/build_fda", "compile": true, "require_resource_names_without_spaces": false, "profiles_dir": "/Users/shatayu/.dbt", "partial_parse_file_diff": true, "defer": false}}